name: CI-CD-Project-DevOps
on: 
  schedule:
   - cron: '0 0 * * *'
  push:
  
jobs:
 CI-Build-Test-Push:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Build the stack
        run: cd react-app && ls && docker-compose up --build -d 
      
      - name: Run curl Test
        run: |
          sudo apt-get update; sudo apt-get install -y curl && curl http://localhost:3000 && docker ps && pwd
          
      - name: change image name
        run: |
          cd /home/runner/work/Project-DevOps-devops-prod.online/ && docker tag mariadb:10.6.4-focal lordagam/project-devops:mariadb && docker tag react-app_frontend lordagam/project-devops:frontend && docker tag react-app_backend lordagam/project-devops:backend
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: docker push
        run: docker push lordagam/project-devops:mariadb && docker push lordagam/project-devops:backend && docker push lordagam/project-devops:frontend
   
      - uses: actions/checkout@master
      - name: Slack Notification 
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
         SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
         SLACK_MESSAGE: 'DevOps pipeline''CI project successfully completed '
         SLACK_TITLE: 'CI project successfully completed '



 Snyk-security:
    needs: CI-Build-Test-Push
    runs-on: ubuntu-latest
    steps:          
      - name: Snyk Infrastructure as Code scan
        id: snyk-iac-scan
        uses: Gershon-A/snyk-iac-code-security-checks@v1.0.1
        continue-on-error: true
        with:
          SNYK_TOKEN: ${{ secrets.SNYKTOKEN }}
          SEVERITY_THRESHOLD: "critical"
          FILE: "example-*"
          update_pr_with_scan_results: true
   
 CD-Terraform:
    #needs: Snyk-security
    runs-on: self-hosted    
    defaults:
      run:
        shell: bash
    steps:
    - name: pwd
      run: pwd 

    - name: pull the Repo 
      run: git pull https://github.com/lordagam/Project-DevOps-devops-prod.online.git && ls -alh

    - name: Go To Dir-File 
      run: cd /home/ec2-user/Project-DevOps-devops-prod.online-actions-runner/_work/Project-DevOps-devops-prod.online/Terraform
    
    - name: Terraform Init
      run: cd .. && cd Terraform && ls -alh && terraform init

    - name: Terraform Validate
      run: cd .. && cd Terraform && ls -alh && terraform validate

    - name: Terraform Plan
      run: cd .. && cd Terraform && ls -alh && terraform plan
      
    - name: Terraform Apply
      run: cd .. && cd Terraform && ls -alh && terraform apply -auto-approve
    
    - name: aws eks kubeconfig 
      run: aws eks --region sa-east-1 update-kubeconfig --name education-eks-pTMQhoHl

    - name: install_Ingress
      run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/aws/deploy.yaml

   # - name: ns-cert-manager
    #  run: kubectl create namespace cert-manager
      
    - name: install_cert_manager
      run: cd .. && cd letsencrypt && ls -alh && chmod +x ./install_cert_manager.sh && ./install_cert_manager.sh

    - name: repo add argo-cd
      run: helm repo add argo-cd https://argoproj.github.io/argo-helm  
   
   # - name: update charts
   #   run: helm dep update charts/argo-cd/  
    
   # - name: install argo-cd
   #   run: helm install argo-cd charts/argo-cd/ 

    #- name: ns-argocd
    #  run: kubectl create namespace argocd


    - name: install argo-cd
      run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: install issue-prod-argocd
      run: cd .. && cd letsencrypt && cd Argocd && ls -alh  && kubectl apply -f issue-prod-argocd.yaml

    - name: apply argo-ingress
      run: cd .. && cd letsencrypt && cd Argocd && ls -alh  && kubectl apply -f argo-ingress.yaml

    - name: Deploy React-App
      run: cd .. && cd react-app && deployment && argocd && ls -alh  && kubectl apply -f react-app-argo-deploy.yaml
  
    - name: Deploy React-App
      run: cd .. && cd react-app && cd deployment && cd argocd && ls -alh  && kubectl apply -f react-app-argo-deploy.yaml

    #- name: Deploy Grafana
    #  run: cd .. && cd letsencrypt && cd Argocd && ls -alh  && kubectl apply -f argo-ingress.yaml

    #- name: Deploy prometheus
    #  run: cd .. && cd letsencrypt && cd Argocd && ls -alh  && kubectl apply -f argo-ingress.yaml

    #- name: Deploy Loki
    #  run: cd .. && cd letsencrypt && cd Argocd && ls -alh  && kubectl apply -f argo-ingress.yaml




      

 slack-Notification:
   name: Slack Notification 
   needs: CD-Terraform
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - name: Slack Notification 
       uses: bryannice/gitactions-slack-notification@2.0.0
       env:
        SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
        SLACK_MESSAGE: 'DevOps pipeline''CI/CD project successfully completed '
        SLACK_TITLE: 'CI/CD project successfully completed '
