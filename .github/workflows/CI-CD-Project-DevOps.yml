name: CI-CD-Project-DevOps
on: 
  schedule:
   - cron: '0 0 * * *'
  push:
  
jobs:
 CI-Build-Test-Push:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Build the stack
        run: cd react-app && ls && docker-compose up --build -d 
      
      - name: Run curl Test
        run: |
          sudo apt-get update; sudo apt-get install -y curl && curl http://localhost:3000 && docker ps && pwd
          
      - name: change image name
        run: |
          cd /home/runner/work/Project-DevOps-devops-prod.online/ && docker tag mariadb:10.6.4-focal lordagam/project-devops:mariadb && docker tag react-app_frontend lordagam/project-devops:frontend && docker tag react-app_backend lordagam/project-devops:backend
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: docker push
        run: docker push lordagam/project-devops:mariadb && docker push lordagam/project-devops:backend && docker push lordagam/project-devops:frontend
   
      - uses: actions/checkout@master
      - name: Slack Notification 
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
         SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
         SLACK_MESSAGE: 'DevOps pipeline''CI project successfully completed '
         SLACK_TITLE: 'CI project successfully completed '



 Snyk-security:
    needs: CI-Build-Test-Push
    runs-on: ubuntu-latest
    steps:          
      - name: Snyk Infrastructure as Code scan
        id: snyk-iac-scan
        uses: Gershon-A/snyk-iac-code-security-checks@v1.0.1
        continue-on-error: true
        with:
          SNYK_TOKEN: ${{ secrets.SNYKTOKEN }}
          SEVERITY_THRESHOLD: "critical"
          FILE: "example-*"
          update_pr_with_scan_results: true




   
 CD-Terraform:
    #needs: Snyk-security
    runs-on: self-hosted    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:

        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner

    - name: pwd
      run: pwd 
   
    #- name: del old  repo 
      #run: rm -rf Tomer-Joseph_project-test && ls -alh
      #run: rm -rf terraform-aws-eks-work-jo && ls -alh


   
    
    - name: pull the repo 
      #run: git clone https://github.com/lordagam/Tomer-Joseph_project-test.git && ls -alh  && git pull https://github.com/lordagam/Project-DevOps-devops-prod.online.git
      #run: cd /home/ec2-user/Project-DevOps-devops-prod.online-actions-runner/_work && git pull https://github.com/lordagam/Project-DevOps-devops-prod.online.git && cd Project-DevOps-devops-prod.online && ls -alh 
      run: git pull https://github.com/lordagam/Project-DevOps-devops-prod.online.git && cd Project-DevOps-devops-prod.online

#    - name: go to dir-file 
#      run: cd /home/ec2-user/Project-DevOps-devops-prod.online-actions-runner/_work/Project-DevOps-devops-prod.online/
#    - name: pwd
#      run: pwd && ls -alh && cd Terraform && ls -alh

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    #- name: Setup Terraform
    #  uses: hashicorp/setup-terraform@v1
    #  with:
    #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: terraform init
      run:  terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
   # - name: terraform validate
   #   run: cd terraform-aws-eks-work-jo && terraform validate

    - name: pwd
      run: pwd && ls -alh
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run:  terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  run: terraform apply -auto-approve -input=false

#    - name: pwd
#      run: cd terraform-aws-eks-work-jo && pwd && ls -alh


    #- name: Terraform Apply
      #run: cd terraform-aws-eks-work-jo &&terraform apply -auto-approve


    - name: pwd
      run: pwd && ls -alh


      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    - name: issue-prod-argocd
      run: cd terraform-aws-eks-work-jo && kubectl apply -f issue-prod-argocd.yaml

    - name: argo-ingress
      run: cd terraform-aws-eks-work-jo && kubectl apply -f argo-ingress.yaml
      

 slack-Notification:
   name: Slack Notification 
   needs: CD-Terraform
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - name: Slack Notification 
       uses: bryannice/gitactions-slack-notification@2.0.0
       env:
        SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK }}
        SLACK_MESSAGE: 'DevOps pipeline''CI/CD project successfully completed '
        SLACK_TITLE: 'CI/CD project successfully completed '
